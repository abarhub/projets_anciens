# makefile du projet de compilation
# makefile pour borland c++ 5.5
# si on declare la macro NO_GC, on a pas le gc
# sinon on l'a
# clean efface tout ce qui n'est pas necessaire

!ifdef NO_GC
NO_GC1 = -D_NO_GC_
!else
NO_GC1 = 
!endif

# varibles pour borland c 5.5
OPT = -wall -r- -y -v $(NO_GC1)
CC = bcc32
OBJ = .obj
LIB = c:\bcc55\lib\wildargs.obj
DEL = del
OUTPUT = parse.exe
EXEC = -e$(OUTPUT)

OBJET = $(SRC:.c=$(OBJ))
SRC = main.c lexyy.c parse.tab.c arbast.c verif.c erreur.c affich_rec.c

!ifndef NO_GC
SRC = $(SRC) gc.c
!endif


$(OUTPUT): $(OBJET)
	$(CC) $(OPT) $(EXEC) $(OBJET) $(LIB)

parse.tab$(OBJ): parse.y
	bison -d parse.y
	$(CC) $(OPT) -c parse.tab.c

lexyy$(OBJ): lexer.lex parse.tab$(OBJ)
	flex lexer.lex
	$(CC) $(OPT) -c lexyy.c

arbast$(OBJ): arbast.c
	$(CC) $(OPT) -c arbast.c

verif$(OBJ): verif.c
	$(CC) $(OPT) -c verif.c

erreur$(OBJ): erreur.c
	$(CC) $(OPT) -c erreur.c

affich_rec$(OBJ): affich_rec.c
	$(CC) $(OPT) -c affich_rec.c

gc$(OBJ): gc.c gc.h
	$(CC) $(OPT) -c gc.c

main$(OBJ): main.c
	$(CC) $(OPT) -c main.c

# sous capucine il faut utiliser cette regle
all2:
	bison -d parse.y
	flex lexer.lex
	gcc  -o parse lexyy.c parse.tab.c arbast.c verif.c 

test:
	parse <test1.kiss

testall:
	parse *.kiss

test2:
	parse *.kiss | grep "correct|e fich"

clean:
	$(DEL) *$(OBJ)
	$(DEL) parse.tab.*
	$(DEL) lex.yy.* 
	$(DEL) lexyy.*
	$(DEL) *.o
	$(DEL) *.tds
	$(DEL) parse.tab.*

touch:
	touch makefile $(OUTPUT)

emacs:
	emacs type.h parse.y verif.c arbast.c lexer.lex verif.h arbast.h &
